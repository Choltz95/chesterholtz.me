<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chester Holtz</title>
    <description>Chester Holtz&#39;s website.  I am an aspiring scientist.
</description>
    <link>http://chesterholtz.me/</link>
    <atom:link href="http://chesterholtz.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Oct 2015 23:22:42 -0400</pubDate>
    <lastBuildDate>Wed, 21 Oct 2015 23:22:42 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Gale-Shapely Algorithm and the Stable Marriage Problem</title>
        <description>&lt;p&gt;to write&lt;/p&gt;

&lt;p&gt;On another note, I recently got a free chromebook and wanted to take a break from my personal research write something simple to put on the webstore. Check out my app redd reader at https://chrome.google.com/webstore/detail/redd-reader/pbhecjpnbjokeahpnaifpbjihffikbpd and feel free to leave comments and suggestions here: https://github.com/Choltz95/reddit-news-for-chrome/issues.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://chesterholtz.me/blog/post/stable_matching</link>
        <guid isPermaLink="true">http://chesterholtz.me/blog/post/stable_matching</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Image Estimation with Finite Polygons</title>
        <description>&lt;p&gt;This project was inspired by &lt;a href=&quot;http://rogeralsing.com/2008/12/07/genetic-programming-evolution-of-mona-lisa/&quot;&gt;Richard Alsing&amp;rsquo;s&lt;/a&gt; blog post on developing a simple evolutionary algorithm to generate an image estimation of the Mona Lisa with a finite number of polygons. Provided even a naive algorithm which consisted of a population size of two - parent and child - and unformly random mutation, the generated images proved surprisingly accurate (after a number of generations had been processed). Here is the simplified algorithm implimented by Richard Alsing in C#. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generate an initial population of programs&lt;/li&gt;
&lt;li&gt;Take the n best programs of the current population&lt;/li&gt;
&lt;li&gt;Create Children from the best programs by mating and mutating them&lt;/li&gt;
&lt;li&gt;Replace the current population with the n-best and the children programs&lt;/li&gt;
&lt;li&gt;Repeat from 2 until satisfied&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Recently, I have been interested in rendering graphics in C and had only completed a few tutorials for OpenGL. This project is my first independent project utilizing OpenGL and the freeGlut toolkit  to render the polygons to a window.&lt;/p&gt;

&lt;p&gt;In terms of linear algebra, we can say an image is defined as a matrix of pixels. For the sake of simplicity, assume that the ith, jth pixel in an image can be either black or white - with the correspnding ith, jth element in the matrix being a 0 or 1. We can say there are both complex images and simple images. complex images - such as the mona lisa - are as you would expect. Simple images are matricies which represent a single polygon. Polygons are closed, have a variable number of verticies, and are shaded - ie the pixels within the bounds created by segmenting lines between verticies are black. Our goal is as follows: given a target complex image and positive numbers n and m, we would like to manufacture &amp;lt;= n simple images with &amp;lt;= m verticies such that the complex image defined as the matrix-sum of all the simple images is as close as possible to the target image. There are a number of metrics we can use to define &amp;ldquo;closeness&amp;rdquo;, but the one I use is simply the standard euclidean distance formula. Instead of implimenting a polygon as a matrix, however, we consider each polygon as a k-tuple &amp;ldquo;DNA&amp;rdquo; structure containing various identifying features and let opengl handle their rendering.&lt;/p&gt;

&lt;p&gt;DNA of each polygon is represented as a tuple containing data representing vertex coordinates, color, and transparency. Initially, for each polygon, random coordinates are chosen for a single vertex, and the coordiantes for the remaining vertecies are chosen also randomly, but bounded above and below to prevent drastically large or small polygons. Mutation then takes place and for each mutation, opengl grabs pixel data and compares it to a matrix of pixels in memory representing the target image. The algorithm itterates through each pixel applying the square of the distance function to each color value (red, blue, green) before summing the result. This value represents the pixel fitness. We accumulate a sum of these pixel fitness values for every pixel indecie of the target image to aquire the child generation fitness. We then compare the child generation fitness of the child to the parent fitness. If the fitness of the child is less than or equal to the fitness of the parent, the parent dies and the child becomes the parent before &amp;ldquo;bearing&amp;rdquo; a mutated child. Through this naive process, the estimation image evolves over time as the parent becomes more and more similar to the target. &lt;/p&gt;

&lt;p&gt;There is really not too much else to comment on. The code is on my &lt;a href=&quot;https://github.com/Choltz95/image_estimation&quot;&gt;github&lt;/a&gt;. The biggest problems I have encountered - disregarding difficulties learning to use opengl and the libpng library - are with the speed of the program. By far, the least efficient component of the program is the naive image comparison algorithm given below. Initially, I had difficulties reading pixel data from the opengl render and instead system called scrot and read the image into memory with libpng. When I switched to using OpenGl&amp;rsquo;s read pixels, the reduction in the number of references to libpng functions and system calls resulted in a 3x decrease in rendering and comparing generations.&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;
//image comparison
for (y=0; y &lt; target_image_height; y++) {
    png_byte* row1 = row_pointers_1[y];
    png_byte* row2 = row_pointers_2[y];
    for (x=0; x &lt; target_image_width; x++) {
        png_byte* ptr1 = &amp;(row1[x*3]);
        png_byte* ptr2 = &amp;(row2[x*3]);
        dr = (ptr1[0] - ptr2[0]);
        dg = (ptr1[1] - ptr2[1]);
        db = (ptr1[2] - ptr2[2]);
        dr2 = dr * dr;
        dg2 = dg * dg;
        db2 = db * db;
        pixel_fitness = dr2 + dg2 + db2;
        current_fitness += pixel_fitness;
    }
}
&lt;/pre&gt;

&lt;p&gt;I think I am done for now with this project, but it would be interesting to experiment with other metrics of image similarity. I noticed github&amp;rsquo;s own document similarity metric includes images. It might be fun to look up what algorithm they use. I included some useful links on the github page as starting points for reading and will add fun screenshots to this post later.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://chesterholtz.me/blog/post/image_estimation</link>
        <guid isPermaLink="true">http://chesterholtz.me/blog/post/image_estimation</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Emergent Behavior Through Boids Simulation(1)</title>
        <description>&lt;p&gt;Simulation of natural phenomena is something I have been interested in for a long time. In particular, approximating the aggregate moving and interaction of a group of individuals is something I have thought about ever since reading Michael Chriton&amp;rsquo;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Prey_(novel)&quot;&gt;Prey&lt;/a&gt; and about the main character&amp;rsquo;s PredPrey software. A few years ago a few friends and I wrote a program based around the rules defined by &lt;a href=&quot;http://www.red3d.com/cwr/&quot;&gt;Craig Reynolds&lt;/a&gt; regarding the behavior of birds engaged in flocking behaviors in response to a predator. Reynolds proposed this model of coordinated animal motion in 1986 and labled the individuals composing a simulated flock &lt;a href=&quot;https://en.wikipedia.org/wiki/Boids&quot;&gt;&amp;ldquo;Boids&amp;rdquo;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essentially, the behavior of these Boids is subject to three fundamental rules: cohesion, separation and alignment. The beauty of Reynold&amp;rsquo;s model is the simplicity of these rules, and the resulting complexity of the Boid&amp;rsquo;s behavior. Reynold&amp;rsquo;s model gave rise to the concept of emergent behavior: the complex interaction of individual agents adhering to a set of simple rules in an artificial intelligent simulation.&lt;/p&gt;

&lt;p&gt;I coded this project in a weekend in about 300 lines using the processing language with the processing.js library as a way to visualize the three rules in a browser. In predprey, each rule is implimented as a force vector and computed for each boid based on the location (also a vector) of surrounding boids. Along with the canonical behavioral rules, I also implimented more advanced ones such as response to predators, obstacles, exhaustion, and goalfinding.&lt;/p&gt;

&lt;p&gt;Before implimenting the actual rules, I first wrote a reusable method to return data from surrounding agents. The radius parameter refers to the radius around a particular boid for the method to get location and velocity vectors from. Depending on the number of boids within the radius, the method will then compute the average location (center of mass) or average velocity of the boids within the radius.&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;
PVector compute_com(ArrayList&lt;Boid&gt; boids, int view_rad, boolean v) {
    float count = 0; // Keep track of how many boids are too close.
    PVector vec_sum = new PVector();

    for (Boid other: boids) {
      int separation = mass + view_rad;
      PVector dist = PVector.sub(other.getLoc(), loc); // distance to other boid.
      float d = dist.mag();

      if (d != 0 &amp;&amp; d&lt;separation) { // If closer than desired, and not self.
        PVector other_vec = new PVector();
        if(v) { other_vec = other.getVel(); } // if we want to average the velocities vs. locations
        else { other_vec = other.getLoc(); }
        vec_sum.add(other_vec); // All locs from closeby boids are added.
        count ++;
      }
    }
    vec_sum.div(count);
    if(count &gt; 0) {
      return vec_sum;
    } else {
      return null;
    }
 }
&lt;/pre&gt;

&lt;p&gt;From here, implimentation of Reynold&amp;rsquo;s fundamental rules is trivial, and  the rule for separation is provided below. In my implimentation, the max_force coefficients and radii are determined arbitrarily for more &amp;ldquo;natural&amp;rdquo; behavior. The boids are also colorized to represent the different state transitions.&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;
void separate (ArrayList&lt;Boid&gt; boids) {
    PVector com = compute_com(boids, 20, false);
    if(com != null) {
      color[2]+=2;
      PVector avoidVec = PVector.sub(loc, com);
      avoidVec.limit(max_force*2.5); // Weigh by factor arbitrary factor 2.5.
      apply_force(avoidVec);    
    }
}
&lt;/pre&gt;

&lt;p&gt;Boids is an interesting little program that serves as the initial example of emergent behavior from three simple rules. For fun, I added a little predator that the boids flee from. Although there are few applications of these kinds of simulations, they are fun to code and entertaining to watch.&lt;/p&gt;

&lt;p&gt;If I have time in the future, I would love to expand this program to encompass the third dimention and I also would like to impliment a genetic algorithm to effectively have the boids &amp;ldquo;evolve&amp;rdquo; and develop behaviors other than the ones I decide.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://chesterholtz.me/blog/post/predprey_1</link>
        <guid isPermaLink="true">http://chesterholtz.me/blog/post/predprey_1</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Distrbuted computation with a raspberry pi cluster(1)</title>
        <description>&lt;p&gt;I have had a great deal of fun reading about the many adventures of the physicist &lt;a href=&quot;https://en.wikipedia.org/wiki/Richard_Feynman&quot;&gt;Richard Feynman&lt;/a&gt;. I read his semi-autobiography &lt;em&gt;Surely You&amp;rsquo;re Joking Mr. Feynman!&lt;/em&gt; as a kid, watched his video series on computer heuristics as a freshman taking a class on organization of computer systems, and found his physics notes to be invaluable while taking my university&amp;rsquo;s freshman physics series. Recently I have also been reading about his collaboration with the great computer scientist &lt;a href=&quot;https://en.wikipedia.org/wiki/Danny_Hillis&quot;&gt;Dany Hillis&lt;/a&gt; - coincidentally advised by 3 other famous computer scientists - on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Connection_Machine&quot;&gt;Connection Machine&lt;/a&gt; - a parallel arangement of multiple supercomputers. Additionally, one of my mentors at The University of Rochester just retired, and while browsing his library, I found that he had worked on the development of software for the &lt;a href=&quot;https://en.wikipedia.org/wiki/BBN_Butterfly&quot;&gt;BBN Butterfly Processor&lt;/a&gt; - one of the largest parallel computers of the 1980s. These factors all served to exite my interest in parallel computation and distributed systems. Although it is a topic I am most interested in, I will most likely not be taking a class on the topic, but also want some sort of foundation in the subject. &lt;/p&gt;

&lt;p&gt;In this project series I will be experimenting with various distributed algorithms for doing various things over a network. I will be examining the efficiency of computation which can be divided among multiple processors. Algorithms which I will be looking at include the canonical mergesort, matrix arithmetic, plotting a Delaunay Triangulation, and others.&lt;/p&gt;

&lt;p&gt;For testing and comparing the parallelized and single-processor approaches for various aglorithms, I primarily consider one important metric: average computation time. These statistics are gathered during run time by using the high precision timers in the C++ chrono library, which allows the collection of timing data accurate on the order of nanoseconds. Testing itself is performed on three raspberry Pi B+ computers. These machines feature an 700 MHz single-core ARM1176JZF-S processor with 144 KB of Cache and 512 MB of RAM. The complete code for this project can be found on on my &lt;a href=&quot;https://github.com/Choltz95/distributedRPI&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Merge sort is a classic sorting algorithm used to introduce the divide and conquer algorithm design paradigm. As such, it is known to parallelize well.&lt;/p&gt;

&lt;p&gt;Recursively, mergesort processes an unsorted list of numbers by dividing the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted). It then repeatedly merges sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list. The following is a short walkthrough of the server-side code written for a distributed mergesort and the results of the comparison.&lt;/p&gt;

&lt;p&gt;An general example is given below with some merge and split steps skipped to conserve space. 
&lt;pre class=&quot;prettyprint linenums&quot;&gt;
Start       : 3--4--2--1--7--5--8--9--0--6
Split       : 3--4--2--1--7  5--8--9--0--6
Split       : 3  4  2  1  7  5  8  9  0  6
Merge       : 3--4  1--2  5--7  8--9  0--6
Merge       : 1--2--3--4  5--7--8--9  0--6
Merge       : 0--1--2--3--4--5--6--7--8--9
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;I partition my initial unsorted array into n subarrays of equal size on the server. These subarrays will be passed to individual raspberry pi nodes to be sorted before being merged on the server. My breakarray() funtion intuitively takes the initial unsorted array and the number of processors on the network.
&lt;pre class=&quot;prettyprint linenums&quot;&gt;
def breakarray(array, n): 
    sectionlength = len(array)/n    #length of each section 
    result = [] 
    for i in range(n):
        if i &amp;lt; n - 1:
            result.append( array[ i * sectionlength : (i+1) * sectionlength ] )
        #include all remaining elements for the last section 
        else:
            result.append( array[ i * sectionlength : ] )&lt;br&gt;
    return result
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, setting up a simple network is quite simple. I make use of Python&amp;rsquo;s socket module to do this. I first provide host and port parameters and create an inet, streaming socket before binding the socket to local host and port.
&lt;pre class=&quot;prettyprint linenums&quot;&gt;
HOST = &amp;#39;&amp;#39;
PORT = 50007 
s = socket.socket(socket.AF&lt;em&gt;INET, socket.SOCK&lt;/em&gt;STREAM) 
print &amp;#39;[DEBUG] Socket created&amp;#39;
s.setsockopt(socket.SOL&lt;em&gt;SOCKET, socket.SO&lt;/em&gt;REUSEADDR, 1) 
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print &amp;#39;[ERROR] Bind failed. Error Code : &amp;#39; + str(msg[0]) + &amp;#39; Message &amp;#39; + msg&lt;a href=&quot;https://en.wikipedia.org/wiki/Richard_Feynman&quot;&gt;1&lt;/a&gt;
    sys.exit()
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Finally, I send and recieve the data in 4KB size chunks. Once sorted, the client sends its assigned subaray back to the server to be merged.
&lt;pre class=&quot;prettyprint linenums&quot;&gt;
for i in range(procno - 1): # Converts array section into string to be sent
    arraystring = repr(sections[i+1]) 
    conn.sendto(arraystring, addr_list[i])  # Sends array string 
print &amp;#39;[DEBUG] Data sent, sorting array...&amp;#39;
&lt;/pre&gt;&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;
# Receives sorted sections from each client
for i in range(procno - 1):
    arraystring = &#39;&#39; 
    print &#39;[DEBUG] Receiving data from clients...&#39; 
    while 1:
        data = conn.recv(4096)  # Receives data in chunks 
        arraystring += data # Adds data to array string 
        if &#39;]&#39; in data: # When end of data is received
            break

    print &#39;[DEBUG] Data received, merging arrays...&#39;    
    array = ms.merge(array, eval(arraystring))  # Merges current array with section from client
    print &#39;[DEBUG] Arrays merged.&#39;
&lt;/pre&gt;

&lt;p&gt;Tests were preformed on list lengths ranging from 1,000 to 1,000,000, and in all cases, the distributed set up outpreformed the single-node settup by factor seemingly proportional to the number of nodes I distributed the unsorted list accross. Sample output is given below:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
$ sudo python server.py 3 10000
[DEBUG] Waiting for client...
[DEBUG] connected to 192.168.1.2:50007
[DEBUG] connected to 192.168.1.3:50007
[DEBUG] Data sent, sorting array...
[DEBUG] Array sorted.
[DEBUG] Receiving data from clients...
[DEBUG] Data Recieved, merging arrays...
[DEBUG] Arrays merged.
[DEBUG] Time taken to sort: 21.223145 seconds.
&lt;/pre&gt;

&lt;p&gt;This concludes the first part of this project series. Expect more updates comming soon.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://chesterholtz.me/blog/post/rpi_distributed_1</link>
        <guid isPermaLink="true">http://chesterholtz.me/blog/post/rpi_distributed_1</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Introduction and personal statement</title>
        <description>&lt;p&gt;I am a junior at &lt;a href=&quot;http://www.hajim.rochester.edu/&quot;&gt;The University of Rochester Hajim School of Engineering&lt;/a&gt; studying computer science and mathematics. I am interested in investing myself in projects which present challenges relating several sciences or technologies. I am currently seeking a summer internship, research position, or job in computer science.&lt;/p&gt;

&lt;p&gt;I would like to continue a path of research in big data analysis and in developing software to interface with real-world data. Currently I am working on writting real time mapping visualization of occurances of global chaotic events. &lt;/p&gt;

&lt;p&gt;Along with computer science, I also have a love of physics and mathematics and I am especially interested in the application of game theory to political science. &lt;/p&gt;

&lt;p&gt;My previous website served as a portfolio to demonstrate my competence in several web technologies and frameworks, but grew to be quite bloated and unecessarily flashy. I decided to focus less on the website itself and instead to make a website which contained deep and meaningful content.&lt;/p&gt;

&lt;p&gt;Since I am not much of a writter, updates to the blog portion of this website will not be consistent, and will most likely be composed of technical reports of projects and research I am involved in. I definitely do not expect this website to be visited frequently, and am primarily utilizing this blog to organize my thoughts and keep a well layed out map of projects and ideas I find interesting.&lt;/p&gt;

&lt;p&gt;On my previous website, I had a page devoted to my five favorite books. They are:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach&quot;&gt;Gödel, Escher, Bach: An Eternal Golden Braid&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Do_Androids_Dream_of_Electric_Sheep%3F&quot;&gt;Do Androids Dream of Electric Sheep?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dune_(novel)&quot;&gt;Dune&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Surely_You%27re_Joking,_Mr._Feynman!&quot;&gt;Surely You&amp;rsquo;re Joking, Mr. Feynman!: Adventures of a Curious Character&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Lord_of_the_Rings&quot;&gt;Lord of the Rings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 09 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://chesterholtz.me/blog/post/personal_statement</link>
        <guid isPermaLink="true">http://chesterholtz.me/blog/post/personal_statement</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Visualizing the genetic diversity of finite populations</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Moran_process&quot;&gt;Moran Process&lt;/a&gt; is a simple stochastic process used to describe finite populations[wikipedia].
I created a simply visualization of fundamental properties of an evolving population. Since color can be represented as a 6-digit hexadecimal number, we can generalize color to be representative of an agents DNA, and preform operations representing mutation, inheritence, selection, and crossover by altering the color of the agent.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://chesterholtz.me/blog/post/finite_population_visualization</link>
        <guid isPermaLink="true">http://chesterholtz.me/blog/post/finite_population_visualization</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Evis - event driven cartography with the GDELT dataset</title>
        <description>&lt;p&gt;The progress on this project has been relatively slow, since i have been working on this project inconsistently. My interest in analysis of large data sets is due to my involvement in Professor Jiebo Luo&amp;rsquo;s &lt;a href=&quot;http://www.cs.rochester.edu/u/jluo/&quot;&gt;VIStA (Visual Intelligence &amp;amp; Social Multimedia Analytics) Research Group&lt;/a&gt; as a research assistant. Currently, I am developing a web interface for the &lt;a href=&quot;http://gdeltproject.org/&quot;&gt;gdelt (Global Database of Events, Language, and Tone) dataset&lt;/a&gt; while also preforming analysis and rendering a visualization of real-time chaotic events - natural disasters, violence against civilians, etc. - in the world. &lt;/p&gt;

&lt;p&gt;Gdelt is a continuously updated repository which gathers events from around the world since 1979 and indexes them according to various metrics. Every 15 minutes, GDELT scrapes various news sources for relavent data and current events to update its database with entries containing locations, times, descriptions and other relavent data.&lt;/p&gt;

&lt;p&gt;In testing, I use Python&amp;rsquo;s matplotlib module with the basemap toolkit to plot data in real time and to literally draw correlations between events. Recently, GDELT was uploaded to google&amp;rsquo;s bigquery which allows me to parse and analize over a quarter million events for free in seconds.&lt;/p&gt;

&lt;p&gt;For the final rendition, I plan writting the application in javascript to be renderable in a browser.&lt;/p&gt;

&lt;p&gt;The code is hosted on my &lt;a href=&quot;https://github.com/Choltz95/Evis&quot;&gt;github&lt;/a&gt;, but is probably a little behind the current version as I am working on this project in a cloud vm.&lt;/p&gt;

&lt;p&gt;An example demonstrating the power of google bigquery is provided below (taken from google&amp;rsquo;s cloud platform blog): when I run the following sql query against a databse containing a quarter billion rows a set of 37 entries representing the most significant events of the last 37 years is returned in only a few seconds. From there, I can download the data as a json file and parse it, drawing data onto a map to be interacted with, or simply examined.
&lt;pre class=&quot;prettyprint linenums&quot;&gt;
SELECT Year, Actor1Name, Actor2Name, Count FROM (
SELECT Actor1Name, Actor2Name, Year, COUNT(*) Count, RANK() OVER(PARTITION BY YEAR ORDER BY Count DESC) rank
FROM 
(SELECT Actor1Name, Actor2Name,  Year FROM [gdelt-bq:full.events] WHERE Actor1Name &amp;lt; Actor2Name and Actor1CountryCode != &amp;#39;&amp;#39; and Actor2CountryCode != &amp;#39;&amp;#39; and Actor1CountryCode!=Actor2CountryCode),  (SELECT Actor2Name Actor1Name, Actor1Name Actor2Name, Year FROM [gdelt-bq:full.events] WHERE Actor1Name &amp;gt; Actor2Name  and Actor1CountryCode != &amp;#39;&amp;#39; and Actor2CountryCode != &amp;#39;&amp;#39; and Actor1CountryCode!=Actor2CountryCode),
WHERE Actor1Name IS NOT null
AND Actor2Name IS NOT null
GROUP EACH BY 1, 2, 3
HAVING Count &amp;gt; 100
)
WHERE rank=1
ORDER BY Year
&lt;/pre&gt;&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
{&quot;Year&quot;:&quot;1979&quot;,&quot;Actor1Name&quot;:&quot;CHINA&quot;,&quot;Actor2Name&quot;:&quot;VIETNAM&quot;,&quot;Count&quot;:&quot;2668&quot;}
{&quot;Year&quot;:&quot;1980&quot;,&quot;Actor1Name&quot;:&quot;AFGHANISTAN&quot;,&quot;Actor2Name&quot;:&quot;RUSSIA&quot;,&quot;Count&quot;:&quot;3899&quot;}
{&quot;Year&quot;:&quot;1981&quot;,&quot;Actor1Name&quot;:&quot;RUSSIA&quot;,&quot;Actor2Name&quot;:&quot;UNITED STATES&quot;,&quot;Count&quot;:&quot;3079&quot;}
{&quot;Year&quot;:&quot;1982&quot;,&quot;Actor1Name&quot;:&quot;ISRAEL&quot;,&quot;Actor2Name&quot;:&quot;LEBANON&quot;,&quot;Count&quot;:&quot;4253&quot;}
{&quot;Year&quot;:&quot;1983&quot;,&quot;Actor1Name&quot;:&quot;ISRAEL&quot;,&quot;Actor2Name&quot;:&quot;LEBANON&quot;,&quot;Count&quot;:&quot;4955&quot;}
...
{&quot;Year&quot;:&quot;2012&quot;,&quot;Actor1Name&quot;:&quot;CHINA&quot;,&quot;Actor2Name&quot;:&quot;UNITED STATES&quot;,&quot;Count&quot;:&quot;42231&quot;}
{&quot;Year&quot;:&quot;2013&quot;,&quot;Actor1Name&quot;:&quot;RUSSIA&quot;,&quot;Actor2Name&quot;:&quot;UNITED STATES&quot;,&quot;Count&quot;:&quot;61191&quot;}
{&quot;Year&quot;:&quot;2014&quot;,&quot;Actor1Name&quot;:&quot;RUSSIA&quot;,&quot;Actor2Name&quot;:&quot;UKRAINE&quot;,&quot;Count&quot;:&quot;120995&quot;}
{&quot;Year&quot;:&quot;2015&quot;,&quot;Actor1Name&quot;:&quot;RUSSIA&quot;,&quot;Actor2Name&quot;:&quot;UKRAINE&quot;,&quot;Count&quot;:&quot;39236&quot;}
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/map.png&quot; alt=&quot;alt text&quot; title=&quot;Example map&quot;&gt;&lt;/p&gt;

&lt;p&gt;The biggest issue encountered is the free data limit. Since the goal for this project involves a real-time component, it is necessary to requery data from gdelt every update.  &lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://chesterholtz.me/blog/post/event_driven_cartography</link>
        <guid isPermaLink="true">http://chesterholtz.me/blog/post/event_driven_cartography</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Micro Lisp interpreter and garbage collection</title>
        <description>&lt;p&gt;This past semester I have been rereading Gerald Sussman&amp;rsquo;s popular text: Structure and Interpretation of Computer Programs. I have worked on a lisp interpreter in JavaScript in the past inspired by the implementations of &lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Norvig&quot;&gt;Peter Norvig&lt;/a&gt; and &lt;a href=&quot;https://github.com/maryrosecook&quot;&gt;Mary Rose Cook&lt;/a&gt; - one that followed the 10 rules of &lt;a href=&quot;https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)&quot;&gt;John McCarthy&lt;/a&gt; detailed in his paper &lt;a href=&quot;http://www.cse.sc.edu/%7Emgv/csce330f13/micromanualLISP.pdf&quot;&gt;A Micro-Manual for Lisp - Not the whole Truth&lt;/a&gt;. This implementation is what will be discussed in this first blog post. In a future post, I may go into detail regarding my eventual reimplimintation of Micro Lisp and several garbage collection algorithms in C++.&lt;/p&gt;

&lt;p&gt;LISP is family of programming languages first conceived in 1959 by John McCarthy. In LISP, computation is expressed as a function of one or more objects. Objects can be other functions, data types, or data structures. Despite its age, derivations of LISP such as Common Lisp, Clojure, and Scheme are the most commonly used programming languages for AI research and many other applications.&lt;/p&gt;

&lt;p&gt;An interpreter is a program that evaluates instructions written in a programming langauge. In contrast to a compiler, an interpreter remains present for the durration of code execution. In general, there are three fundamental phases of interpretation - tokenization, parsing, and evaluation.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;http://github.com/Choltz95/microlispjs&quot;&gt;Micro Lisp&lt;/a&gt; is an interpreter that supports function invocation, lambdas, lets, ifs, numbers, strings, a few JavaScript library functions, and lists. I wrote it over a weekend in about 200 lines of JavaScript, and also included a number of simple and more complex test cases. The code for the project can be found on my &lt;a href=&quot;http://github.com/Choltz95/microlispjs&quot;&gt;github&lt;/a&gt;, while one can test a deployed version &lt;a href=&quot;http://littlelispjs.divshot.io/&quot;&gt;here&lt;/a&gt;. It is recommended, however, to clone yourself a copy directly from the repository and open index.html in your browser locally as there might be some features - like multiline coding - that are only supported in the current version on github.&lt;/p&gt;

&lt;p&gt;The two primary parts of interpretation I focused on when writting my Lisp interpreter where the &lt;code&gt;parsing&lt;/code&gt; and &lt;code&gt;evaluation&lt;/code&gt; of code. When we parse a Lisp expression, we take the code typed by the programmer and transform  it into a representation that we can traverse and evaluate. Evaluation refers to the procedure of processing this structure according to the symantic rules of Lisp and returning a result.&lt;/p&gt;

&lt;p&gt;Traditionally, the semantic parsing process is separated into two parts: the &lt;code&gt;tokenization&lt;/code&gt; and the assembling of the &lt;code&gt;AST&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The tokenizer demarcates a string of input characters into &lt;code&gt;tokens&lt;/code&gt; before passing them on to be assembled into an AST - which will be defined later. For Micro Lisp, tokens consist of parentheses, symbols, and numbers.&lt;/p&gt;

&lt;p&gt;We tokenize by taking advantage of JavaScript&amp;rsquo;s &lt;code&gt;replace()&lt;/code&gt; and &lt;code&gt;split()&lt;/code&gt; functions to take a character string input, add whitespace around each parentheses, and split the result by whitespace to get a JavaScript list of tokens. tokenize() is given below.&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;var tokenize = function(input) {
   return input.replace(/\(/g, &#39; ( &#39;)
               .replace(/\)/g, &#39; ) &#39;)
               .trim()
               .split(/\s+/);
 };
&lt;/pre&gt;

&lt;p&gt;An AST, or Abstract Syntax Tree is a representation of the structure of code written in a language. The tree is abstract since each node of this tree represents a construct in code, but some elements of the code may be ommitted, i.e. parentheses in our case. Since the inherint syntax structure of a lisp symbolic expression - &amp;rsquo;S-Expression&amp;rsquo; - is representative of an AST, this task is quite simple. An S-Expression can simply be defined inductively as an atom, or an expression (x y) where x and y can be S-Expressions themselves.&lt;/p&gt;

&lt;p&gt;Atoms are collections of letters, digits or other characters not otherwise defined in the micro-lisp language. furthermore, lists consist of a left parenthesis followed by a head - or &lt;code&gt;CAR&lt;/code&gt; - and a tail - a &lt;code&gt;CDR&lt;/code&gt;. Lists always end with a closing parenthesis.&lt;/p&gt;

&lt;p&gt;Parsing a Lisp S-Expression is quite simple. First, parse() is called with a character string input representing the program. to be interpreted. We then tokenize this input to get a list of tokens and pass this list into read_from to assemble the AST. We shift through elements of the list one at a time. If the token at the 0th indice is a &amp;rsquo;(&amp;rsquo;, we instantiate a list of S-Expressions and recursively add to that list until we encounter a matching &amp;rsquo;)&amp;rsquo;. The parse() logic is given below.&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;
function parse(input) {
  return read_from(tokenize(input));
}

function read_from(tokens) {
    if (tokens.length == 0) {
        throw &#39;unexpected EOF&#39;;
    }

    var token = tokens.shift();
    if (&#39;(&#39; == token) {
        var L = [];
        while (tokens[0] != &#39;)&#39;) {
            L.push(read_from(tokens));
        }
        tokens.shift();
        return L;
    } else {
        return atom(token);
      }
}
&lt;/pre&gt;

&lt;p&gt;Below is an example of input, and the resulting output of parsing the Lisp S-Expression (hello (hello world)).&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
&gt;tokenize(&#39;(hello (hello world))&#39;)
[&quot;(&quot;, &quot;hello&quot;, &quot;(&quot;, &quot;hello&quot;, &quot;world&quot;, &quot;)&quot;, &quot;)&quot;]
&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
&gt;parse(&#39;(hello (hello world))&#39;)
[&quot;hello&quot;, [&quot;hello&quot;, &quot;world&quot;]]
&lt;/pre&gt;

&lt;p&gt;Evaluation is the most complex part of the interpretation process. When we evaluate, we look at an expression and check its value according to the &lt;code&gt;env&lt;/code&gt; environment - implemented as a JS Dictionary. An environment is simply a mapping from a variable name to its value. &lt;/p&gt;

&lt;p&gt;In code, we impliment a finite number of predefined functions in the global environment as&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;
var Operations = {
&#39;+&#39;       : function(a, b) { return a + b; },
&#39;-&#39;       : function(a, b) { return a - b;},
&#39;*&#39;       : function(a, b) { return a * b; },
&#39;/&#39;       : function(a, b) { return a / b; },
&#39;&lt;&#39;       : function(a, b) { return a &lt; b; },
&#39;&gt;&#39;       : function(a, b) { return a &gt; b; },
&#39;&lt;=&#39;      : function(a, b) { return a &lt;= b; },
&#39;&gt;=&#39;      : function(a, b) { return a &gt;= b; },
&#39;=&#39;      : function(a, b) { return a == b; },
&#39;or&#39;     : function(a,b)  { return a||b;   },
&#39;cons&#39;   : function(a, b) { return [a].concat(b); },
&#39;car&#39;    : function(a)    { return (a.length !==0) ? a[0] : null; },
&#39;cdr&#39;    : function(a)    { return (a.length&gt;1) ? a.slice(1) : null; },
&#39;list&#39;   : function()     { return Array.prototype.slice.call(arguments); },
};
&lt;/pre&gt;

&lt;p&gt;and impliment a second environment - or symbolic table when the interpreter parses a &lt;code&gt;lambda&lt;/code&gt; or &lt;code&gt;def&lt;/code&gt; function. This second environment typically contains information pertaining to expressions and variables such as their scope or type.&lt;/p&gt;

&lt;p&gt;When we evaluate an expression, we check the expression&amp;rsquo;s function and arguments. If an expression is prefixed by a &lt;code&gt;&amp;#39;&lt;/code&gt;, or the function being applied is the string &amp;ldquo;QUOTE&amp;rdquo;, we return the expression, or arguments literally and do not evaluate. The forms necessary for a lisp to be considered a Micro Lisp are given as the rules below where expressions are denoted e or a, functions as f and variables as v.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;QUOTE - The value of (QUOTE A) is A&lt;/li&gt;
&lt;li&gt;CAR - The value of (CAR e) is the first element of e where e is defined as a non-empty list. i.e. (CAR (QUOTE (A B))) returns A&lt;/li&gt;
&lt;li&gt;CDR - The value of (CDR e) is the list of remaining elements of e when CAR of e is removed, where e is defined above. ie (CDR (QUOTE (A B))) returns B.&lt;/li&gt;
&lt;li&gt;CONS - The value of (CONS e1 e2) is the list that results from prefixing e1 onto e2. Thus, (CONS (QUOTE A) (QUOTE B)) returns the list (A B).&lt;/li&gt;
&lt;li&gt;EQUAL - The value of (EQUAL e1 e2) is true if e1 = e2 and false if otherwise. (EQUAL 1 2) returns false.&lt;/li&gt;
&lt;li&gt;ATOM - The value of (ATOM e1) is true if e1 is an atom and false if otherwise. (ATOM)&lt;/li&gt;
&lt;li&gt;COND - The value of (COND(e1 e1) &amp;hellip; (pn en)) is the value of ei, where pi is the the first ofthe p&amp;rsquo;s whose value is not NIL.&lt;/li&gt;
&lt;li&gt;DEFINE - The DEFINE function maps a variable to the given expression.&lt;/li&gt;
&lt;li&gt;LAMBDA - Lambda is a construct in the Micro-Lisp language which allows for the definition
of anonymous functions.&lt;/li&gt;
&lt;li&gt;Operators - We also provide definitions for traditional boolean ( =, &amp;gt;, ≥, &amp;lt;, ≤&amp;hellip;) and
arithmetic operators (+, −, ∗, /&amp;hellip;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An example of the case &amp;lsquo;DEFINE&amp;rsquo; is given below:&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;
case &quot;DEFINE&quot;:
    [_, variable, exp] = x;
    env.set(variable, evaluate(exp, env));
&lt;/pre&gt;

&lt;p&gt;Here, we switch over the first token x[0], and assuming that the next token x[1] is an atom, we set a new indice in the local environment to the variable name &amp;#39;variable&amp;rsquo; and its value to the argument expression (x[2]) recursively evaluated with respect to the global enviornment.&lt;/p&gt;

&lt;p&gt;With these rules in place, we have a robust and portable lisp that we can use to program anywhere in with a browser. It becomes quite easy to define our own, more complex functions. By querying the help function by typing &amp;ldquo;sample&amp;rdquo; into the interpreter prompt, a number of different examples are presented with the most advanced being the recursive application of the fibonacci function onto a range of numbers.&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
&gt; (define range (lambda (a b) (cond (= a b) (quote ()) (cons a (range (+ a 1) b)))))
null
&gt; (define map (lambda (f xs) (cond (= xs nil) nil (cons (f (car xs)) (map f (cdr xs))))))
null
&gt; (define fib (lambda (n) (cond (or (= n 0) (= n 1)) 1 (+ (fib (- n 1)) (fib (- n 2))))))
null
&gt; (map (lambda (x) (fib x)) (range 0 10))
(1 1 2 3 5 8 13 21 34 55 null)
&lt;/pre&gt;

&lt;p&gt;Originally I had intended to also discuss preforming garbage collection on list based system in this post and implementing a turtle graphics module utilizing HTML5 canvas, but I think I will visit those topics at a later time. &lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://chesterholtz.me/blog/post/micro_lisp_interpreter</link>
        <guid isPermaLink="true">http://chesterholtz.me/blog/post/micro_lisp_interpreter</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
  </channel>
</rss>
